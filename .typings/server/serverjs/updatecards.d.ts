export function getFaceAttributeSource(card: any, isExtra: any): any;
declare namespace _default {
    export { initializeCatalog };
    export { catalog };
    export { addCardToCatalog };
    export { addLanguageMapping };
    export { updateCardbase };
    export { downloadCardbase };
    export { downloadDefaultCards };
    export { saveAllCards };
    export { writeCatalog };
    export { convertCard };
    export { convertName };
    export { convertId };
    export { convertLegalities };
    export { convertType };
    export { convertColors };
    export { convertParsedCost };
    export { convertCmc };
    export { getTokens };
}
export default _default;
declare function initializeCatalog(): void;
declare const catalog: {};
declare function addCardToCatalog(card: any, isExtra: any): void;
declare function addLanguageMapping(card: any): void;
declare function updateCardbase(ratings: any, histories: any, basePath?: string, defaultPath?: null, allPath?: null): Promise<void>;
declare function downloadCardbase(basePath?: string): Promise<boolean>;
declare function downloadDefaultCards(basePath?: string, defaultSourcePath?: null, allSourcePath?: null): Promise<[any, any]>;
declare function saveAllCards(ratings?: any[], histories?: any[], basePath?: string, defaultPath?: null, allPath?: null): Promise<void>;
declare function writeCatalog(basePath?: string): Promise<any[]>;
declare function convertCard(card: any, isExtra: any): {
    color_identity: any[];
    set: any;
    set_name: any;
    foil: any;
    nonfoil: any;
    collector_number: any;
    released_at: any;
    reprint: any;
    promo: any;
    prices: {
        usd: number | null;
        usd_foil: number | null;
        eur: number | null;
        tix: number | null;
    };
    elo: any;
    popularity: any;
    cubeCount: any;
    pickCount: any;
    digital: any;
    isToken: boolean;
    border_color: any;
    name: any;
    name_lower: string;
    full_name: string;
    artist: any;
    scryfall_uri: any;
    rarity: any;
    oracle_text: any;
    _id: any;
    oracle_id: string;
    cmc: any;
    legalities: {
        Legacy: any;
        Modern: any;
        Standard: any;
        Pioneer: any;
        Pauper: any;
        Brawl: any;
        Historic: any;
        Commander: any;
        Penny: any;
        Vintage: any;
    };
    parsed_cost: any;
    colors: any[];
    type: any;
    full_art: any;
    language: any;
    mtgo_id: any;
    layout: any;
    tcgplayer_id: any;
    loyalty: any;
    power: any;
    toughness: any;
    image_small: any;
    image_normal: any;
    art_crop: any;
    image_flip: any;
    colorcategory: any;
    tokens: any[];
};
declare function convertName(card: any, isExtra: any): any;
declare function convertId(card: any, isExtra: any): any;
declare function convertLegalities(card: any, isExtra: any): {
    Legacy: any;
    Modern: any;
    Standard: any;
    Pioneer: any;
    Pauper: any;
    Brawl: any;
    Historic: any;
    Commander: any;
    Penny: any;
    Vintage: any;
};
declare function convertType(card: any, isExtra: any, faceAttributeSource: any): any;
declare function convertColors(card: any, isExtra?: boolean): any[];
declare function convertParsedCost(card: any, isExtra?: boolean): any;
declare function convertCmc(card: any, isExtra: any, faceAttributeSource: any): any;
declare function getTokens(card: any, catalogCard: any): any[];
//# sourceMappingURL=updatecards.d.ts.map