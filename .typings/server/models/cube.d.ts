export default Cube;
declare const Cube: mongoose.Model<{
    name: string;
    tags: string[];
    shortID: string;
    owner: mongoose.Types.ObjectId;
    isListed: boolean;
    privatePrices: boolean;
    isFeatured: boolean;
    overrideCategory: boolean;
    categoryOverride: string;
    categoryPrefixes: string[];
    cards: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: string[];
        type_line: string;
        isUnlimited: boolean;
        colors?: string[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    maybe: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: string[];
        type_line: string;
        isUnlimited: boolean;
        colors?: string[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    defaultDraftFormat: number;
    numDecks: number;
    users_following: mongoose.Types.ObjectId[];
    defaultPrinting: string;
    disableNotifications: boolean;
    schemaVersion: number;
    basics: string[];
    cardOracles: string[];
    keywords: string[];
    categories: string[];
    tag_colors: {
        tag?: string;
        color?: string;
    }[];
    default_sorts: string[];
    draft_formats: {
        packs: {
            steps: {
                amount: number;
                action?: string;
            }[];
            slots: string[];
        }[];
        title?: string;
        multiples?: boolean;
        markdown?: string;
        defaultSeats?: number;
    }[];
    defaultStatus: string;
    type?: string;
    description?: string;
    image_uri?: string;
    image_artist?: string;
    image_name?: string;
    owner_name?: string;
    date_updated?: Date;
    updated_string?: string;
    default_show_unsorted?: boolean;
    card_count?: number;
}, {}, {}, {}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, "type", {
    name: string;
    tags: string[];
    shortID: string;
    owner: mongoose.Types.ObjectId;
    isListed: boolean;
    privatePrices: boolean;
    isFeatured: boolean;
    overrideCategory: boolean;
    categoryOverride: string;
    categoryPrefixes: string[];
    cards: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: string[];
        type_line: string;
        isUnlimited: boolean;
        colors?: string[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    maybe: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: string[];
        type_line: string;
        isUnlimited: boolean;
        colors?: string[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    defaultDraftFormat: number;
    numDecks: number;
    users_following: mongoose.Types.ObjectId[];
    defaultPrinting: string;
    disableNotifications: boolean;
    schemaVersion: number;
    basics: string[];
    cardOracles: string[];
    keywords: string[];
    categories: string[];
    tag_colors: {
        tag?: string;
        color?: string;
    }[];
    default_sorts: string[];
    draft_formats: {
        packs: {
            steps: {
                amount: number;
                action?: string;
            }[];
            slots: string[];
        }[];
        title?: string;
        multiples?: boolean;
        markdown?: string;
        defaultSeats?: number;
    }[];
    defaultStatus: string;
    type?: string;
    description?: string;
    image_uri?: string;
    image_artist?: string;
    image_name?: string;
    owner_name?: string;
    date_updated?: Date;
    updated_string?: string;
    default_show_unsorted?: boolean;
    card_count?: number;
}>>;
import mongoose from "mongoose";
//# sourceMappingURL=cube.d.ts.map